# Generated by Django 3.1 on 2020-08-09 15:53

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RepairShop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='Deleted')),
                ('name', models.CharField(max_length=128, verbose_name='Repair shop name')),
            ],
            options={
                'verbose_name': 'Repair shop',
                'verbose_name_plural': 'Repair shops',
            },
        ),
        migrations.CreateModel(
            name='WorkRegime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='Deleted')),
                ('name', models.CharField(max_length=128, verbose_name='Regime name')),
                ('repair_shop', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.repairshop', verbose_name='Repair shop')),
            ],
            options={
                'verbose_name': 'Work regime',
                'verbose_name_plural': 'Work regimes',
            },
        ),
        migrations.CreateModel(
            name='Workman',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='Deleted')),
                ('first_name', models.CharField(max_length=128, verbose_name='First name')),
                ('middle_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Middle name')),
                ('last_name', models.CharField(max_length=128, verbose_name='Last Name')),
                ('individual_work_regime', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.workregime', verbose_name='Individual work regime (optional)')),
                ('repair_shop', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.repairshop', verbose_name='Repair shop')),
            ],
            options={
                'verbose_name': 'Workman',
                'verbose_name_plural': 'Workmans',
                'ordering': ('last_name', 'first_name', 'middle_name'),
            },
        ),
        migrations.CreateModel(
            name='UserCar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='Deleted')),
                ('model', models.CharField(blank=True, max_length=64, null=True, verbose_name='Car model')),
                ('plate_num', models.CharField(blank=True, max_length=16, null=True, verbose_name='Plate number')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Car owner')),
            ],
            options={
                'verbose_name': 'Car',
                'verbose_name_plural': 'Cars',
            },
        ),
        migrations.AddField(
            model_name='repairshop',
            name='default_work_regime',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.workregime', verbose_name='Default work regime (optional)'),
        ),
        migrations.CreateModel(
            name='AppointmentsArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='Deleted')),
                ('date', models.DateField(verbose_name='Appointment date')),
                ('time', models.DateTimeField(verbose_name='Appointment time')),
                ('duration', models.PositiveIntegerField(verbose_name='Appointment duration (seconds)')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
                ('work_regime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.workregime', verbose_name='Work regime')),
                ('workman', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.workman', verbose_name='Repair mechanic')),
            ],
            options={
                'verbose_name': 'Appointment (archive)',
                'verbose_name_plural': 'Appointments (archive)',
            },
        ),
        migrations.CreateModel(
            name='Appointments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='Deleted')),
                ('date', models.DateField(verbose_name='Appointment date')),
                ('time', models.DateTimeField(verbose_name='Appointment time')),
                ('duration', models.PositiveIntegerField(verbose_name='Appointment duration (seconds)')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
                ('work_regime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.workregime', verbose_name='Work regime')),
                ('workman', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.workman', verbose_name='Repair mechanic')),
            ],
            options={
                'verbose_name': 'Appointment',
                'verbose_name_plural': 'Appointments',
            },
        ),
        migrations.CreateModel(
            name='WorkRegimeExceptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='Deleted')),
                ('work_time_begin', models.TimeField(verbose_name='Work start time')),
                ('work_time_end', models.TimeField(verbose_name='Work end time')),
                ('shift_finish_on_next_day', models.BooleanField(default=False, verbose_name='Shift finish on next day')),
                ('lunch_time_begin', models.TimeField(blank=True, null=True, verbose_name='Lunch start time')),
                ('lunch_time_end', models.TimeField(blank=True, null=True, verbose_name='Lunch end time')),
                ('appointment_duration', models.PositiveIntegerField(default=3600, verbose_name='Appointment duration (seconds)')),
                ('date', models.DateField(verbose_name='Date')),
                ('is_holiday', models.BooleanField(default=False, verbose_name='Is holiday')),
                ('work_regime', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.workregime', verbose_name='Regime')),
            ],
            options={
                'verbose_name': 'Exception of work regime',
                'verbose_name_plural': 'Exceptions of work regime',
                'unique_together': {('work_regime', 'date')},
            },
        ),
        migrations.CreateModel(
            name='WorkRegimeDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='Deleted')),
                ('work_time_begin', models.TimeField(verbose_name='Work start time')),
                ('work_time_end', models.TimeField(verbose_name='Work end time')),
                ('shift_finish_on_next_day', models.BooleanField(default=False, verbose_name='Shift finish on next day')),
                ('lunch_time_begin', models.TimeField(blank=True, null=True, verbose_name='Lunch start time')),
                ('lunch_time_end', models.TimeField(blank=True, null=True, verbose_name='Lunch end time')),
                ('appointment_duration', models.PositiveIntegerField(default=3600, verbose_name='Appointment duration (seconds)')),
                ('day_of_week', models.SmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], verbose_name='Day of the week')),
                ('work_regime', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.workregime', verbose_name='Regime')),
            ],
            options={
                'verbose_name': 'Details of work regime',
                'verbose_name_plural': 'Details of work regime',
                'unique_together': {('work_regime', 'day_of_week')},
            },
        ),
    ]
